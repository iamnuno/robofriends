{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/Searchbox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","robot","i","key","Scroll","children","Searchbox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gUAeeA,MAZf,YAAkC,IAAnBC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MACxB,OACE,6BAASC,UAAU,uFACjB,yBAAKA,UAAU,MACb,yBAAKC,IAAG,8BAAyBJ,GAAMG,UAAU,wCAAwCE,IAAI,sBAC7F,wBAAIF,UAAU,oBAAoBF,GAClC,wBAAIE,UAAU,yBAAyBD,MCM/BI,MAZf,YAA+B,IAAXC,EAAU,EAAVA,OACnB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAOC,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAKJ,EAAOG,GAAGV,GAAIA,GAAIO,EAAOG,GAAGV,GAAIC,KAAMM,EAAOG,GAAGT,KAAMC,MAAOK,EAAOG,GAAGR,a,MCG/EU,MARf,YAA+B,IAAbC,EAAY,EAAZA,SACjB,OACC,yBAAKV,UAAU,UACbU,ICSWC,MAbf,YAAsC,IAAjBC,EAAgB,EAAhBA,aACpB,OACC,yBAAKZ,UAAU,WACd,2BACCA,UAAU,sHACVa,KAAK,SACLC,YAAY,oBACZC,SAAUH,MCYCI,E,YAlBd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACZC,UAAU,GAHO,E,+EAODC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAOG,KAAKJ,MAAMC,SACjB,2DACAG,KAAKL,MAAMP,a,GAfcc,IAAMC,WC6CnBC,E,YAvCd,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAACC,GACjB,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAb1C,EAAKb,MAAQ,CACZ,OAAU,GACV,YAAe,IAJH,E,iFAQO,IAAD,OACnBc,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAEnB,OAAQgC,S,+BAO/B,IAAD,EACwBd,KAAKJ,MAA7Bd,EADA,EACAA,OAAQyB,EADR,EACQA,YACVQ,EAAiBjC,EAAOkC,QAAO,SAAAhC,GACpC,OAAOA,EAAMR,KAAKyC,cAAcC,SAASX,EAAYU,kBAEtD,OAAQnC,EAAOqC,OAGb,yBAAKzC,UAAU,MACd,wBAAIA,UAAU,eAAd,eACA,kBAAC,EAAD,CAAWY,aAAcU,KAAKK,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUvB,OAAQiC,OAPtB,wBAAIrC,UAAU,MAAd,e,GAzBewB,IAAMC,WCKJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.3e4662c3.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nfunction Card({id, name, email}) {\n\treturn (\n\t\t\t<article className=\"bg-light-red dib br3 ma2 pa4-ns mv3 ba b--black-10 shadow-3 bg-animate hover-bg-red\">\n\t\t\t  <div className=\"tc\">\n\t\t\t    <img src={`http://robohash.org/${id}`} className=\"br-100 h4 w4 dib ba b--near-white pa1\" alt=\"This is an avatar\" />\n\t\t\t    <h1 className=\"f4 mb2 dark-grey\">{name}</h1>\n\t\t\t    <h2 className=\"f6 fw4 near-white mt0\">{email}</h2>\n\t\t\t  </div>\n\t\t\t</article>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nfunction CardList({ robots }) {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((robot, i) => {\n\t\t\t\t\treturn <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\nimport './Scroll.css'\n\nfunction Scroll({ children }) {\n\treturn (\n\t\t<div className=\"scroll\">\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React from 'react';\n\nfunction Searchbox({ searchChange }) {\n\treturn (\n\t\t<div className=\"pt2 pb3\">\n\t\t\t<input\n\t\t\t\tclassName=\"mw-100 dark-grey w-100 w5-ns f5 input-reset ba b--moon-grey ph4 pv3 border-box tc br-pill bg-washed-yellow shadow-1\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"Search for robots\"\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Searchbox;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\treturn this.state.hasError ?\n\t\t\t<h1>Oooops. That's not good :'(</h1> :\n\t\t\tthis.props.children;\n\t}\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport './App.css'\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport Searchbox from '../components/Searchbox';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\t'robots': [],\n\t\t\t'searchField': ''\n\t\t} \n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({ robots: users}));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchField: event.target.value})\n\t}\n\n\trender() {\n\t\tconst { robots, searchField } = this.state;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t})\n\t\treturn !robots.length ?\n\t\t\t<h1 className=\"tc\">Loading</h1> :\n\t\t\t(\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<h1 className=\"custom-font\">Robofriends</h1>\n\t\t\t\t\t<Searchbox searchChange={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />,document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}